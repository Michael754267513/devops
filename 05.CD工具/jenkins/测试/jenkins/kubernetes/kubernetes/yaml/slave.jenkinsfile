@Library(value="handpay-library@master", changelog=true) _

// def gitlabWebhook = new org.devops.gitlab()
def formatMsg = new org.devops.tools()
def gitlabWebhook= new org.devops.gitlab()
def tomail= new org.devops.toemail()

String branchName = "${env.branch}"

branchName = branch - "refs/heads/"

pipeline {
  agent {
    kubernetes { 
      defaultContainer 'maven'
      yamlFile 'kubernetes/kubernetes/yaml/slave.yaml'
    }
  }
  environment {
        harbor_url = 'https://harbor.devops.hpay' 
        DOCKER_USERNAME  =  ""
        DOCKER_PASSWORD = ""
    }
  
  options {
        timeout(time: 1, unit: 'HOURS') 
        timestamps()
    }

  stages {
    stage('获取代码') {
        steps {
             checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'gitlabuser', url: "${gitlabUrl}"]]])      
        } 
    }
    stage('编译') {
        steps {
                container('maven') {
                sh '/usr/bin/mvn clean install '}
            }
    }
    stage('打包镜像') {
        steps {
                container('docker') {
                sh 'docker  build -t  ${harbor_url}/${system}/${projectName}:${commitSha} .'
                }
            }
        }
    stage('推送镜像') {
        steps {
                container('docker') {
                sh 'docker login -u ${DOCKER_USERNAME}  -p ${DOCKER_PASSWORD} harbor.devops.hpay'
                sh 'docker  push ${harbor_url}/${system}/${projectName}:${commitSha}'
                 
                }
        }
       }         
    stage('部署') {
        steps {
                container('kubectl') {
                sh '/bin/kubectl get ns'
                }
            }
        } 
}        
    post {
        always {
            echo 'always'
            // deleteDir() /* clean up our workspace */
        }
        success {
            echo 'I succeeeded!'
            script {
                 formatMsg.PrintMes('I succeeeded!',"red")
                 tomail.Email("succeeeded","${tomailsend}")
                 //gitlabWebhook.ChangeCommitStatus("${project_id}","${commitSha}","success")
            }
                
            
            
        }
        unstable {
            echo 'I am unstable :/'
            script { 
                 tomail.Email("unstable","${tomailsend}")
                 //gitlabWebhook.ChangeCommitStatus("${project_id}","${commitSha}","success")
            }
                
        }
        failure {
            echo 'I failed :('
            script { 
                 tomail.Email("failure","${tomailsend}")
                 //gitlabWebhook.ChangeCommitStatus("${project_id}","${commitSha}","success")
            }
            
        }
        changed {
            echo 'Things were different before...'
        }
        aborted {
            echo '喔霍取消了'
            script { 
                 tomail.Email("喔霍取消了","${tomailsend}")
                 //gitlabWebhook.ChangeCommitStatus("${project_id}","${commitSha}","success")
            }
            
        }
     }   
   
}
